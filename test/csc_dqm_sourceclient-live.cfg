process DQM = {

	# Online Mode
	source = EventStreamHttpReader {
		string sourceURL = "http://cmsdisk1.cms:48500/urn:xdaq-application:service=storagemanager"
        	int32 max_event_size = 7000000
        	int32 max_queue_depth = 5
        	untracked string consumerName = "CSC DQM Consumer"
        	untracked string consumerPriority = "normal"
        	untracked int32 headerRetryInterval = 3
        	untracked double maxEventRequestRate = 10
        	untracked PSet SelectEvents = { vstring SelectEvents={"*"} }
     	}


	es_source cscConditions = PoolDBESSource {
        	VPSet toGet = {
			{ string record = "CSCDBGainsRcd"
		            string tag = "CSCDBGains_ideal" },
		        { string record = "CSCDBCrosstalkRcd"
		            string tag = "CSCDBCrosstalk_ideal" },
		        { string record = "CSCDBNoiseMatrixRcd"
		            string tag = "CSCDBNoiseMatrix_ideal" },
		        { string record = "CSCDBPedestalsRcd"
		            string tag = "CSCDBPedestals_ideal" },
		        { string record = "CSCChamberIndexRcd"
		           string tag = "CSCChamberIndex" },
		        { string record = "CSCChamberMapRcd"
		            string tag = "CSCChamberMap" },
		        { string record = "CSCCrateMapRcd"
		            string tag = "CSCCrateMap" },
		        { string record = "CSCDDUMapRcd"
		            string tag = "CSCDDUMap" }
		}

		string timetype = "runnumber"
                string connect = "frontier://(serverurl=http://frontier1.cms:8000/FrontierOn)(serverurl=http://frontier2.cms:8000/FrontierOn)(retrieve-ziplevel=0)/CMS_COND_ON_170_CSC"

                PSet DBParameters = {
                        untracked uint32 authenticationMethod = 1
                }

        }

        module cscunpacker = CSCDCCUnpacker {
             untracked bool runDQM = true
	     untracked bool Debug =  false
             untracked bool PrintEventNumber = false
             FileInPath theMappingFile = "CondFormats/CSCObjects/data/csc_slice_test_map.txt"        
             untracked bool UseExaminer = true       
             untracked uint32 ErrorMask = 0xDFCFEFFF 
             untracked uint32 ExaminerMask = 0x5FB3BF6
	     untracked bool UnpackStatusDigis = true
	     untracked bool isMTCCData = false
	     InputTag InputObjects = source
        }

       #service = MessageLogger {
       #         vstring destinations = {"CSCDQM.log"}
       #         PSet CSCDQM.log     = { bool noLineBreaks = true   }
       #         PSet detailedInfo.txt = { int32  lineLength = 132    }
       #}
       
	service = CSCMonitor{
		untracked string BookingFile = "file:/nfshome0/barvic/config/emuDQMBooking.xml"
		untracked bool monitorVerbosity=false
		untracked bool   CSCDQMSaveRootFile = false
		untracked int32  EventsInterval = 10000 
		untracked string RootFileName ="CSCMonitorDigi.root"
		FileInPath theMappingFile = "CondFormats/CSCObjects/data/csc_slice_test_map.txt"
	}

	service = ModuleWebRegistry{ }
	service = LockService{untracked vstring labels = {"source"}}
        service = DaqMonitorROOTBackEnd{}
	service = DQMShipMonitoring{
	// event-period for shipping monitoring to collector (default: 25)
	    untracked uint32 period = 5
     	}

        service = MonitorDaemon{
        # if true, will automatically start DQM thread in background
        untracked bool AutoInstantiate=true
        # if >=0, upon a connection problem, the source will automatically
        # attempt to reconnect with a time delay (secs) specified here
        # (default: 5)
        untracked int32 reconnect_delay = 5
        # collector hostname; examples:localhost(default),lxcmse2.cern.ch, etc
        # untracked string DestinationAddress = "localhost"
        untracked string DestinationAddress = "srv-c2d05-19"
        # port for communicating with collector (default: 9090)
        untracked int32 SendPort = 9090
        # monitoring period in ms (i.e. how often monitoring elements
        # are shipped to the collector; default: 1000)
        untracked int32 UpdateDelay = 3000
        # name of DQM source (default: DQMSource)
        untracked string NameAsSource = "CSC"
        }


	#### BEGIN DQM Online Environment #####
	# use include file for dqmEnv dqmSaver
    	include "DQMServices/Components/test/dqm_onlineEnv.cfi"
    	# put your subsystem name here:
    	# DT, Ecal, Hcal, SiStrip, Pixel, RPC, CSC, L1T
    	# (this goes into the filename)
    	replace dqmSaver.fileName = "CSC"
    	replace dqmSaver.dirName       = "."
    	# (this goes into the foldername)
    	replace dqmEnv.subSystemFolder = "CSC"

    	# optionally change fileSaving  conditions
    	# replace dqmSaver.prescaleLS =   -1
    	# replace dqmSaver.prescaleTime = -1 # in minutes
    	# replace dqmSaver.prescaleEvt =  -1
    	replace dqmSaver.saveAtRunEnd = true
    	# replace dqmSaver.saveAtJobEnd = false
    	# will add switch to select histograms to be saved soon

        path p = {cscunpacker, dqmEnv, dqmSaver}
}

