
#    include "CondCore/DBCommon/data/CondDBSetup.cfi"
#    es_source cscConditions = PoolDBESSource {
#      using CondDBSetup
#      VPSet toGet = {
#        { string record = "CSCChamberIndexRcd"
#          string tag = "CSCChamberIndex" },
#        { string record = "CSCChamberMapRcd"
#          string tag = "CSCChamberMap" },
#        { string record = "CSCCrateMapRcd"
#          string tag = "CSCCrateMap" },
#        { string record = "CSCDDUMapRcd"
#          string tag = "CSCDDUMap" }
#      }
#
#      string timetype = "runnumber"
#
#      # To be used on CMS network (one of them)
#      string connect = "frontier://(proxyurl=http://localhost:3128)(serverurl=http://frontier1.cms:8000/FrontierOnProd)(serverurl=http://frontier2.cms:8000/FrontierOnProd)(retrieve-ziplevel=0)/CMS_COND_20X_CSC"
#      #string connect = "frontier://(serverurl=http://frontier1.cms:8000/FrontierOn)(serverurl=http://frontier2.cms:8000/FrontierOn)(retrieve-ziplevel=0)/CMS_COND_ON_170_CSC"
#      #string connect = "frontier://(serverurl=http://frontier1.cms:8000/FrontierOn)(serverurl=http://frontier2.cms:8000/FrontierOn)(retrieve-ziplevel=0)/CMS_COND_ON_18x_CSC"
#
#      # To be used on lxplus
#      #string connect = "frontier://FrontierDev/CMS_COND_CSC"
#
#      untracked bool siteLocalConfig = false
#      untracked uint32 authenticationMethod = 1
#      untracked uint32 messagelevel = 0
#    }

    module dqmCSCClient = CSCMonitorModule {

	# Base name for monitor folders and output file		
	untracked string monitorName = "CSC"

        # Source element name in the Event sandwich
        untracked InputTag InputObjects = source

        # Histogram booking file
        FileInPath  BookingFile = "DQM/CSCMonitorModule/data/emuDQMBooking.xml"

        # Examiner complains into cout/cerr or not
        untracked bool ExaminerOutput = false

        # Examiner mask
        untracked uint32 ExaminerMask = 0x16ebf3f6

        # Examiner crc key (1 - ALCT, 2 - CFEB, 4 - TMB), default 0 (no crc checks)
        untracked uint32 ExaminerCRCKey = 7

        # Book DDU on hit
        untracked bool hitBookDDU = true

        # Fractional histos update key (1 - on Run end, 2 - on Luminosity
        # section end, 4 - each k runs, see FractUpdateEventFreq parameter), default = 1
        untracked uint32 FractUpdateKey = 5

        # Fractional histogram updates each n events, default is 1. 
        # This works only in the case then FractUpdateKey is set to 4
        untracked uint32 FractUpdateEventFreq = 100

        # Address mask: the list of HW addresses that are known to have problems
        # Masks are formed this way: "[side], [station], [ring], [chamber], [layer], [cfeb], [hv]"
        # Where:
        # side = 1 (plus), 2 (minus), * (both); station = n (number), * (all)
        # ring = n (number), * (all); chamber = n (number), * (all)
        # layer = n (number), * (all); cfeb = n (number), * (all);  hv = n (number), * (all)
        # i.e. switch-off the whole minus side: "2, *, *, *, *, *, *"
        # i.e. switch off the whole 2nd station: "*, 2, *, *, *, *, *"
        untracked vstring AddressMask = { 
          #"2, *, *, *, *, *, *", 
          #"1, 1, 1, 1, *, *, *", 
          #"1, 1, 1, 2, *, *, *" 
        }

        # Efficiency calculation parameters used by CSCSummary class
        untracked PSet effParameters = { 

          # Thresholds for cold, hot and errorous chambers. Thresholds are
          # being measured to eps = (#_of_actual_events/#_of_expected_events).
          # If threshold < or > eps - significance is being calculated on
          # statistics availability (see sigfail)

          untracked double threshold_cold   = 0.1
          untracked double threshold_hot    = 2.0
          untracked double threshold_err    = 0.1
          untracked double threshold_nodata = 1.0

          # Significance threshold to be measured to. If calculated
          # significance is bigger then appropriate sigfail - mark reporting HW
          # element as errorous or other.

          untracked double sigfail_cold   = 5.0
          untracked double sigfail_hot    = 5.0
          untracked double sigfail_err    = 5.0
          untracked double sigfail_nodata = 5.0

        }

    }

    service = MessageLogger {

      #untracked vstring destinations = { 
      #  "detailedInfo" , "critical" , "cout"
      #}

      untracked vstring debugModules = { "CSCMonitorModule" }

      untracked vstring suppressInfo = { "source" }

      untracked PSet critical     = { untracked string threshold = "ERROR"   }

      untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 

      untracked PSet cout = {
        untracked string threshold = "INFO"
        untracked bool noLineBreaks = false
        untracked PSet WARNING = {untracked int32 limit = 0 }
      }

    }

    #module qTester = QualityTester {
    #  untracked FileInPath qtList = "DQM/CSCMonitorModule/test/QualityTests.xml"
    #  untracked int32 prescaleFactor  = 1
    #  untracked bool getQualityTestsFromFile = true
    #  untracked string reportThreshold = "red"
    #}

